// –§–∞–π–ª –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–≤–∞–∑–∞—Ä–∞ —É–¥–∞–ª–µ–Ω—ã

"use client";

import { useState, useCallback, useEffect } from "react";

interface AuthAnimationsState {
  showQuasarExplosion: boolean;
  showDashboardLoading: boolean;
  isAnimationInProgress: boolean;
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
let globalAnimationState: AuthAnimationsState = {
  showQuasarExplosion: false,
  showDashboardLoading: false,
  isAnimationInProgress: false,
};

let stateUpdaters: Array<(state: AuthAnimationsState) => void> = [];

const updateGlobalState = (newState: Partial<AuthAnimationsState>) => {
  globalAnimationState = { ...globalAnimationState, ...newState };
  stateUpdaters.forEach((updater) => updater(globalAnimationState));
};

export const useAuthAnimations = () => {
  const [animationState, setAnimationState] =
    useState<AuthAnimationsState>(globalAnimationState);

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  useEffect(() => {
    stateUpdaters.push(setAnimationState);
    return () => {
      stateUpdaters = stateUpdaters.filter(
        (updater) => updater !== setAnimationState
      );
    };
  }, []);

  const startAuthAnimations = useCallback(() => {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    updateGlobalState({
      showQuasarExplosion: true,
      isAnimationInProgress: true,
    });
  }, []);

  const handleQuasarComplete = useCallback(() => {
    console.log("üåü –ö–≤–∞–∑–∞—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –∑–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard");
    updateGlobalState({
      showQuasarExplosion: false,
      showDashboardLoading: true,
    });
  }, []);

  const handleDashboardLoadingComplete = useCallback(() => {
    console.log("üì± –ó–∞–≥—Ä—É–∑–∫–∞ dashboard –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
    updateGlobalState({
      showQuasarExplosion: false,
      showDashboardLoading: false,
      isAnimationInProgress: false,
    });
  }, []);

  const resetAnimations = useCallback(() => {
    updateGlobalState({
      showQuasarExplosion: false,
      showDashboardLoading: false,
      isAnimationInProgress: false,
    });
  }, []);

  return {
    ...animationState,
    startAuthAnimations,
    handleQuasarComplete,
    handleDashboardLoadingComplete,
    resetAnimations,
  };
};
